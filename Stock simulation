import numpy as np
import matplotlib.pyplot as plt

# Parameters
S0 = 10               # Initial stock price
mu = 0.0005           # Mean daily return (0.05%)
sigma = 0.01          # Daily volatility (1%)
T = 2500              # Number of trading days
N = 100               # Number of simulated price paths
dt = 1                # Each time step is 1 day

# Pre-allocate price paths
paths = np.zeros((T + 1, N))
paths[0] = S0

# Simulate paths
for t in range(1, T + 1):
    z = np.random.standard_normal(N)
    paths[t] = paths[t-1] * np.exp((mu - 0.5 * sigma**2) * dt + sigma * np.sqrt(dt) * z)

# Plot the results
plt.figure(figsize=(12, 6))
plt.plot(paths)
plt.title("Monte Carlo Simulated Stock Price Paths (Geometric Brownian Motion)")
plt.xlabel("Trading Days")
plt.ylabel("Stock Price")
plt.show()
